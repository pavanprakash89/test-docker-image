name: Weekly Release

on:
  #schedule:
    #- cron: '0 0 * * 1'  # Runs at 00:00 UTC every Monday
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: false
        default: 'auto'

jobs:
  image-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter.outputs.image-files }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            ubuntu18: 'base-images/ubuntu/ubuntu18-dockerfile'
            ubuntu20: 'base-images/ubuntu/ubuntu20-dockerfile'
            ubuntu22: 'base-images/ubuntu/ubuntu22-dockerfile'
            ubuntu24: 'base-images/ubuntu/ubuntu24-dockerfile'
            centos7: 'base-images/centos/centos7-dockerfile'
            centos8: 'base-images/centos/centos8-dockerfile'
            rhel7: 'base-images/rhel/rhel7-dockerfile'
            rhel8: 'base-images/rhel/rhel8-dockerfile'
            rhel9: 'base-images/rhel/rhel9-dockerfile'
            ubuntu18-ci: 'ci-images/ubuntu/ubuntu18-ci-dockerfile'
            ubuntu20-ci: 'ci-images/ubuntu/ubuntu20-ci-dockerfile'
            ubuntu22-ci: 'ci-images/ubuntu/ubuntu22-ci-dockerfile'
            ubuntu24-ci: 'ci-images/ubuntu/ubuntu24-ci-dockerfile'
            centos7-ci: 'ci-images/centos/centos7-ci-dockerfile'
            centos8-ci: 'ci-images/centos/centos8-ci-dockerfile'
            rhel7-ci: 'ci-images/rhel/rhel7-ci-dockerfile'
            rhel8-ci: 'ci-images/rhel/rhel8-ci-dockerfile'
            rhel9-ci: 'ci-images/rhel/rhel9-ci-dockerfile'


  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_OUTPUT

      - name: Generate new version
        id: generate_version
        run: |
          if [ '${{ github.event.inputs.version }}' != 'auto' ]; then
            new_version='${{ github.event.inputs.version }}'
          else
            latest_version=${LATEST_TAG#v}
            IFS='.' read -ra version_parts <<< "$latest_version"
            new_patch=$((version_parts[2] + 1))
            new_version="${version_parts[0]}.${version_parts[1]}.$new_patch"
          fi
          echo "NEW_VERSION=v$new_version"
          echo "NEW_VERSION=v$new_version" >> $GITHUB_OUTPUT
        env:
          LATEST_TAG: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}

      - name: Create Release
        id: create_release
        uses: comnoco/create-release-action@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_version.outputs.NEW_VERSION }}
          release_name: Release ${{ steps.generate_version.outputs.NEW_VERSION }}
          body: "Weekly rolling release"
          draft: false
          prerelease: false

    #   - name: Build and push Docker image
    #     uses: docker/build-push-action@v4
    #     with:
    #       push: true
    #       tags: |
    #         your-registry/your-image:${{ steps.generate_version.outputs.NEW_VERSION }}
    #         your-registry/your-image:latest

      - name: Deploy
        run: |
          # Add your deployment steps here
          echo "Deploying version ${{ steps.generate_version.outputs.NEW_VERSION }}"