name: Test matrix generation based on the dockerfiles

on:
  workflow_dispatch:

jobs:
  check-branch:
    runs-on: ubuntu-latest
    outputs:
      is_main: ${{ steps.check_main.outputs.is_main }}
    steps:
      - name: Check if branch is main
        id: check_main
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "is_main=true" >> $GITHUB_OUTPUT
          else
            echo "is_main=false" >> $GITHUB_OUTPUT
          fi

  generate-matrix:
    needs: check-branch
    if: needs.check-branch.outputs.is_main == 'true'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Generate matrix
        id: set-matrix
        run: |
          MATRIX=""
          for DOCKERFILE in $(find . -name "*-dockerfile"); do
            if [[ $DOCKERFILE == *"base-images"* ]] || [[ $DOCKERFILE == *"ci-images"* ]]; then
              IMAGE_TYPE=$(echo $DOCKERFILE | cut -d'/' -f2 | sed 's/-images//')
              OS_TYPE=$(echo $DOCKERFILE | cut -d'/' -f3)
              FILENAME=$(basename $DOCKERFILE)
              OS_VERSION=$(echo $FILENAME | grep -o '[0-9]\+')
              REGISTRY_PATH="${IMAGE_TYPE}/${OS_TYPE}/${OS_VERSION}"
              
              ENTRY=$(jq -n \
                --arg image_type "$IMAGE_TYPE" \
                --arg os_type "$OS_TYPE" \
                --arg os_version "$OS_VERSION" \
                --arg registry_path "$REGISTRY_PATH" \
                --arg dockerfile "$DOCKERFILE" \
                '{image_type: $image_type, os_type: $os_type, os_version: $os_version, registry_path: $registry_path, dockerfile: $dockerfile}')
              
              MATRIX="${MATRIX}${ENTRY},"
            fi
          done
          
          MATRIX="{ \"include\": [${MATRIX%,}] }"
          echo "matrix=$MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

#   build-and-push:
#     needs: [check-branch, generate-matrix]
#     if: needs.check-branch.outputs.is_main == 'true'
#     runs-on: ubuntu-latest
#     strategy:
#       matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
#       fail-fast: false
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to Docker Registry
#         uses: docker/login-action@v2
#         with:
#           registry: your-registry-url
#           username: ${{ secrets.REGISTRY_USERNAME }}
#           password: ${{ secrets.REGISTRY_PASSWORD }}

#       - name: Build and push
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           file: ${{ matrix.dockerfile }}
#           push: true
#           tags: your-registry-url/${{ matrix.registry_path }}:latest