name: Docker Build Workflow

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            base-ubuntu: base-images/ubuntu/*-dockerfile
            base-centos: base-images/centos/*-dockerfile
            ci-ubuntu: ci-images/ubuntu/*-dockerfile
            ci-centos: ci-images/centos/*-dockerfile
            runner-ubuntu: runner-images/ubuntu/*-dockerfile
            runner-centos: runner-images/centos/*-dockerfile

      - id: set-matrix
        run: |
          matrix=$(jq -n --argjson changes '${{ toJSON(steps.filter.outputs) }}' '{
            include: [
              {image_type: "base", os_type: "ubuntu"}|select($changes["base-ubuntu"] == "true"),
              {image_type: "base", os_type: "centos"}|select($changes["base-centos"] == "true"),
              {image_type: "ci", os_type: "ubuntu"}|select($changes["ci-ubuntu"] == "true"),
              {image_type: "ci", os_type: "centos"}|select($changes["ci-centos"] == "true"),
              {image_type: "runner", os_type: "ubuntu"}|select($changes["runner-ubuntu"] == "true"),
              {image_type: "runner", os_type: "centos"}|select($changes["runner-centos"] == "true")
            ] | map(select(.))
          }')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: detect-changes
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).include[0] }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Get OS versions
        id: os_versions
        run: |
          VERSIONS=$(ls ${{ matrix.image_type }}-images/${{ matrix.os_type }}/*-dockerfile | sed -E 's/.*\/([^-]+)-dockerfile/\1/' | sort -u)
          echo "versions=$(echo $VERSIONS | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Generate Docker image variables
        id: docker_vars
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IMAGE_NAME="myorg/${{ matrix.image_type }}-${{ matrix.os_type }}"
          TAGS=""
          for VERSION in ${{ steps.os_versions.outputs.versions }}; do
            TAGS="$TAGS,$IMAGE_NAME:$VERSION-$TIMESTAMP"
          done
          TAGS=${TAGS:1}  # Remove leading comma
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_TAGS=$TAGS" >> $GITHUB_OUTPUT

      - name: Build Docker images
        run: |
          IFS=',' read -ra TAGS <<< "${{ steps.docker_vars.outputs.IMAGE_TAGS }}"
          for TAG in "${TAGS[@]}"; do
            VERSION=$(echo $TAG | sed -E 's/.*:([^-]+)-[0-9]+/\1/')
            echo "Building Docker image: $TAG"
            echo "Dockerfile: ${{ matrix.image_type }}-images/${{ matrix.os_type }}/${VERSION}-dockerfile"
            # Uncomment the following line to actually build the Docker image:
            # docker build -t $TAG -f ${{ matrix.image_type }}-images/${{ matrix.os_type }}/${VERSION}-dockerfile .
          done

      # Add more steps as needed, such as pushing the images to a registry